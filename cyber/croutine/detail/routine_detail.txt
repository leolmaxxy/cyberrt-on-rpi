#include <cstdlib>
#include <cstring>
#include <iostream>

#include "cyber/common/log.h"

extern "C" {
extern void ctx_swap(void**, void**) asm("ctx_swap");
};

constexpr size_t STACK_SIZE = 2 * 1024 * 1024;
#if defined __aarch64__
constexpr size_t REGISTERS_SIZE = 160;
#else
constexpr size_t REGISTERS_SIZE = 56;
#endif

typedef void (*func)(void*);
struct RoutineContext {
  char stack[STACK_SIZE];
  char* sp = nullptr;
#if defined __aarch64__
} __attribute__((aligned(16)));
#else
};
#endif

void MakeContext(const func& f1, const void* arg, RoutineContext* ctx);

inline void SwapContext(char** src_sp, char** dest_sp) {
  ctx_swap(reinterpret_cast<void**>(src_sp), reinterpret_cast<void**>(dest_sp));
}

#include "cyber/croutine/detail/routine_context.h"
//  The stack layout looks as follows:
//
//              +------------------+
//              |      Reserved    |
//              +------------------+
//              |  Return Address  |   f1
//              +------------------+
//              |        RDI       |   arg
//              +------------------+
//              |        R12       |
//              +------------------+
//              |        R13       |
//              +------------------+
//              |        ...       |
//              +------------------+
// ctx->sp  =>  |        RBP       |
//              +------------------+
void MakeContext(const func &f1, const void *arg, RoutineContext *ctx) {
  ctx->sp = ctx->stack + STACK_SIZE - 2 * sizeof(void *) - REGISTERS_SIZE;
  std::memset(ctx->sp, 0, REGISTERS_SIZE);
#ifdef __aarch64__
  char *sp = ctx->stack + STACK_SIZE - sizeof(void *);
#else
  char *sp = ctx->stack + STACK_SIZE - 2 * sizeof(void *);
#endif
  *reinterpret_cast<void **>(sp) = reinterpret_cast<void *>(f1);
  sp -= sizeof(void *);
  *reinterpret_cast<void **>(sp) = const_cast<void *>(arg);
}

======== swap_x86_64.S ================

.globl ctx_swap
.type  ctx_swap, @function
ctx_swap:
      pushq %rdi
      pushq %r12
      pushq %r13
      pushq %r14
      pushq %r15
      pushq %rbx
      pushq %rbp
      movq %rsp, (%rdi)

      movq (%rsi), %rsp
      popq %rbp
      popq %rbx
      popq %r15
      popq %r14
      popq %r13
      popq %r12
      popq %rdi
      ret

=========== swap_aarch64.S =============

.text
.align 4
.globl ctx_swap

ctx_swap:
	stp    x0,   x30, [sp,#-16]!
	stp    d8,   d9, [sp,#-16]!
	stp    d10,  d11, [sp,#-16]!
	stp    d12,  d13, [sp,#-16]!
	stp    d14,  d15, [sp,#-16]!
	stp    x1,   x19, [sp,#-16]!
	stp    x20,  x21, [sp,#-16]!
	stp    x22,  x23, [sp,#-16]!
	stp    x24,  x25, [sp,#-16]!
	stp    x26,  x27, [sp,#-16]!
	stp    x28,  x29, [sp,#-16]!

    mov    x3,   sp
	str    x3,   [x0]

	ldr    x3,   [x1]
	mov    sp,   x3

	ldp    x28,  x29,  [sp]
	ldp    x26,  x27,  [sp,#16]!
	ldp    x24,  x25,  [sp,#16]!
	ldp    x22,  x23,  [sp,#16]!
	ldp    x20,  x21,  [sp,#16]!
	ldp    x1,   x19,  [sp,#16]!
	ldp    d14,  d15,  [sp,#16]!
	ldp    d12,  d13,  [sp,#16]!
	ldp    d10,  d11,  [sp,#16]!
	ldp    d8,   d9,   [sp,#16]!
	ldp    x0,   x30,  [sp,#16]!

	add    sp,   sp,   #16

	ret
